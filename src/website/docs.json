{
  "src/components/Attr.js": {
    "description": "An `Attr` is a part of the JSX definition of a `Schema`. Each `Attr` describes\nthe rules and meta data associated with a field on the `Form`.\n\nFor example, here is an `Attr` which defines a field that takes the users\nemail address:\n\n```\n  <Schema>\n    ...\n    <Attr\n        name=\"email\"\n        label=\"Email\"\n        placeholder=\"Enter valid email address\"\n        validation={{\"format\": \"email\"}}/>\n    ...\n  </Schema>\n```\n\n### Props\n\n * *name* - The name of the field, or basically how it is referenced when rendering the field\n * *label* - The UI fieldly name of the field, used when constructing a `Group`.\n * *placeholder* - If appropiate to the widget, displays placeholder text.\n * *validation* - See [Revalidator](https://github.com/flatiron/revalidator) for possible formats\nfor the validation property.",
    "displayName": "Attr",
    "methods": []
  },
  "src/components/Chooser.js": {
    "description": "React Form control to select an item from a list.\n\nWraps the react-select library\n\n### Example\n\n```\n    const animalMap = {1: \"dog\", 2: \"duck\", 3: \"cat\", ...};\n    const animalList = animalMap.map((value, key) => ({id: key, label: value}));\n\n    ...\n\n    <Chooser\n        initialChoiceList={animalList}\n        placeholder=\"Select an Animal...\"\n        width={300}\n    />\n```\n\nGenerally you would use the Chooser as part of a `ChooserGroup`:\n\n```\n   <ChooserGroup\n       attr=\"contact_type\"\n          initialChoice={contactType}\n          initialChoiceList={contactTypes}\n          disableSearch={true}\n          width={200}\n      />\n```\n\n### Props\n\n * *initialChoice* - Pass in the initial value as an id\n\n * *initialChoiceList* - Pass in the available list of options as a list of\n   objects. For example:\n\n   ```\n   [{id: 1: label: \"cat\"},\n    {id: 2: label: \"dog\"},\n    ... ]\n   ```\n * *disableSearch* - If true the chooser becomes a simple pulldown menu\n   rather than allowing the user to type into it.\n\n * *width* - Customize the horizontal size of the Chooser.\n\n * *attr* - The identifier of the property being editted\n\n * *onChange* - Callback for when value changes. Will be passed the attr and\n   new value as a string.",
    "displayName": "Chooser",
    "methods": [
      {
        "name": "_isEmpty",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "_isMissing",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "_generateKey",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "choice",
            "type": null
          },
          {
            "name": "choiceList",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "v",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getOptionList",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getFilteredOptionList",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          },
          {
            "name": "limit",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getOptions",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          },
          {
            "name": "cb",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getCurrentChoice",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "disabled": {
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableSearch": {
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "searchContains": {
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "allowSingleDeselect": {
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "limit": {
        "defaultValue": {
          "value": "200",
          "computed": false
        }
      },
      "width": {
        "defaultValue": {
          "value": "300",
          "computed": false
        }
      }
    }
  },
  "src/components/ChooserGroup.js": {
    "description": "",
    "displayName": "ChooserGroup",
    "methods": []
  },
  "src/components/DateEdit.js": {
    "description": "Form control to edit a date text field.\n\nSet the initial value with 'initialValue' and set a callback for\nvalue changed with 'onChange'.",
    "displayName": "DateEdit",
    "methods": [
      {
        "name": "isEmpty",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "isMissing",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "v",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDateChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "v",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "width": {
        "defaultValue": {
          "value": "\"100%\"",
          "computed": false
        }
      }
    }
  },
  "src/components/DateEditGroup.js": {
    "description": "Wraps the dateedit widget",
    "displayName": "DateEditGroup",
    "methods": []
  },
  "src/components/Form.js": {
    "description": "",
    "displayName": "Form",
    "methods": []
  },
  "src/components/FormErrors.js": {
    "description": "Display errors for a form. This manages three types of error/warning infomation that is\ndisplayed to the user:\n\n  - A hard error, which will display in preference to other\n    messages. A hard error might be something like \"The form\n    could not be saved\". This type of error, passed in as the\n    'error' prop, is an object with two parts:\n        * msg     - The main error message\n        * details - Further information about the message\n\n  - error count, passed in as 'numErrors' prop. If this is\n    passed in then this component will display the number of\n    errors on the form. This is used with the Form code so\n    that the user can see live how many validation errors are\n    left on the page\n\n  - missing count, passed in as 'missingCount' prop. If there\n    is not an error on the page but missingCount > 0 then this\n    component will display a n fields to complete message. If\n    the prop 'showRequired' is passed in as true, then the\n    form is in the mode of actually displaying as an error\n    all missing fields. The message in this case will be\n    simply \"Form incomplete\".",
    "displayName": "FormErrors",
    "methods": []
  },
  "src/components/Group.js": {
    "description": "Groups are intended to be used with the `formMixin` and provide a shorthand\nmethod of adding a control and its label to a form, including support for\nmanaging missing and error fields automatically.\n\nA group has two main purposes:\n\n * Wrap a form component such that it is shown with a label and arranged\n   within a bootstrap grid layout.\n * Expect standard props that are added to each of the wrapped form\n   components (attrName, placeholder, validation etc) as a 'attr' object.\n\nWithin ESDB we display the same form layout for each form element over and over.\nThis component is used to reduce all that boiler plate code. As such this\ncomponent is pretty hard coded in terms of its layout: 2 columns for the label\nand 10 for the control. The Group is also meant to be used with the `formMixin`.\nThe `formMixin` provides a `getAttr()` call that extracts data such as existing\nformValues, meta info such as label name, placeholder name, etc. In addition\nit also supplies callbacks for missing and error counts as well as value changed\nthat are attached to functions that alter the mixin state.\n\nExample:\n\n```\n <Group attr={this.getAttr(\"contact_type\")} >\n     <Chooser initialChoice={contactType} initialChoiceList={contactTypes} disableSearch={true}/>\n </Group>\n```",
    "displayName": "Group",
    "methods": []
  },
  "src/components/KeyValueEditor.js": {
    "description": "",
    "displayName": "KeyValueEditor",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "attr",
            "type": null
          },
          {
            "name": "keyValue",
            "type": null
          }
        ],
        "returns": null
      }
    ]
  },
  "src/components/ListEditView.js": {
    "description": "Editing of a list of widgets. This The widgets themselves are passed in as 'items'.\n\nA ListEditView is created within the ListEditorMixin, so you do not generally need\nto use this component directly.\n\nThis user of this component should supply event handlers to manage the list\nwhen items are added or removed. This is done in the ListEditorMixin render() method.\n\nThese are onAddItem() and onRemoveItem(). Each item padded in should have\nand id set (item.props.id). This item is used to uniquely identify each row so that\nremoving a row happens correctly. Finally, 'canAddItems' lets you hide the [+] icon\n(for instance if there's no possible items that can be added from a list).",
    "displayName": "ListEditView",
    "methods": [
      {
        "name": "addItem",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "removeItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ]
  },
  "src/components/OptionButtons.js": {
    "description": "",
    "displayName": "OptionButtons",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ]
  },
  "src/components/OptionsGroup.js": {
    "description": "Wraps the option button widget",
    "displayName": "OptionsGroup",
    "methods": []
  },
  "src/components/Schema.js": {
    "description": "A schema can be specified using JSX to define the rules for\neach form field. As an example, here is a form that will take the\nfirst name, last name and email of a contact. We can define also\nthat the email should be of format `email` and that the first and\nlast names are `required`:\n\n```\n   const schema = (\n       <Schema>\n           <Attr name=\"first_name\" label=\"First name\" placeholder=\"Enter first name\"\n                 required={true} validation={{\"type\": \"string\"}}/>\n           <Attr name=\"last_name\" label=\"Last name\" placeholder=\"Enter last name\"\n                 required={true} validation={{\"type\": \"string\"}}/>\n           <Attr name=\"email\" label=\"Email\" placeholder=\"Enter valid email address\"\n                 validation={{\"format\": \"email\"}}/>\n       </Schema>\n   );\n```\n\nSee also `Attr`.",
    "displayName": "Schema",
    "methods": []
  },
  "src/components/TagsEdit.js": {
    "description": "Form control to select tags from a pull down list.\nYou can also add a new tag with the Add tag button.",
    "displayName": "TagsEdit",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "val",
            "type": null
          },
          {
            "name": "tagList",
            "type": null
          }
        ],
        "returns": null
      }
    ]
  },
  "src/components/TagsGroup.js": {
    "description": "Wraps the tags editor widget",
    "displayName": "TagsGroup",
    "methods": []
  },
  "src/components/TextArea.js": {
    "description": "Form control to edit a Text Area field",
    "displayName": "TextArea",
    "methods": [
      {
        "name": "_isEmpty",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "_isMissing",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "v",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "_getError",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onBlur",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onFocus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "width": {
        "defaultValue": {
          "value": "\"100%\"",
          "computed": false
        }
      },
      "rows": {
        "defaultValue": {
          "value": "4",
          "computed": false
        }
      }
    }
  },
  "src/components/TextAreaGroup.js": {
    "description": "Wraps the TextArea widget",
    "displayName": "TextAreaGroup",
    "methods": []
  },
  "src/components/TextEdit.js": {
    "description": "Form control to edit a text field.\nSet the initial value with 'initialValue' and set a callback for\nvalue changed with 'onChange'.",
    "displayName": "TextEdit",
    "methods": [
      {
        "name": "_isEmpty",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "_isMissing",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "v",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "_getError",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onBlur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onFocus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "width": {
        "defaultValue": {
          "value": "\"100%\"",
          "computed": false
        }
      }
    }
  },
  "src/components/TextEditGroup.js": {
    "description": "Wraps the TextEdit widget",
    "displayName": "TextEditGroup",
    "methods": []
  }
}